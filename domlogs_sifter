#!/bin/bash
clear

				# Setting up colours and 'top offender' (head) amount
ycl=$(tput setaf 6)
ncl=$(tput sgr0)

                # Short or extended version
printf "\n\t/---------------------------------------------\\"
printf "\n\t            [ ${ycl}Domlogs Sifter${ncl} v0.3]\n"
printf "\n\t     Please keep in mind that it may take"
printf "\n\t     some time to sift through the logs!"
printf "\n\t\\---------------------------------------------/\n"
printf "\n[${ycl}Options${ncl}]\n[${ycl}1${ncl}] View Domlogs Stats for the Last 2 Hours\n[${ycl}2${ncl}] Quick Search\n[${ycl}3${ncl}] Extended Search\n\n[${ycl}Choice${ncl}]: "
read va0

				# Checks if the entries are within acceptable boundaries
if [ -z "$va0" ] || ! ( [ "$va0" -gt "0" ] && [ "$va0" -lt "4" ] ) 2>/dev/null
then printf "Wrong entry, exiting script.\n"
exit 1
fi

clear
printf "\n\t/---------------------------------------------\\"
printf "\n\t            [ ${ycl}Domlogs Sifter${ncl} v0.3]\n"
printf "\n\t     Please keep in mind that it may take"
printf "\n\t     some time to sift through the logs!"
printf "\n\t\\---------------------------------------------/\n"

if [ "$va0" -eq "1" ]
then va5="View Domlogs Stats for the Last 2 Hours\n\n"
elif [ "$va0" -eq "2" ]
then va5="Quick Search\n\n"
elif [ "$va0" -eq "3" ]
then va5="Extended Search\n\n"
fi
printf "\n[${ycl}Choice${ncl}]: $va5";

				# If it's the Most Recent Quick Search option, it should print out the most recent information and simply exit
if [ "$va0" -eq "1" ]
then 
# printf "\n[${ycl}Time frame${ncl}][ ${ycl}2${ncl} Hours]: $(date -d "120 min ago" "+%e-%b-%Y %T") \n\t\t\t$(date "+%e-%b-%Y %T")\n\n"
printf "\n[${ycl}Time frame${ncl}][ ${ycl}2${ncl} Hours]: \n $(date -d "120 min ago" "+%e-%b-%Y %T") \n $(date "+%e-%b-%Y %T")\n\n"
sarray=( wp-login.php xmlrpc.php POST "" )
for each in "${sarray[@]}"
do
        find /usr/local/apache/domlogs/*/ -type f -exec grep "${each}" {} \; | awk -v minTime=$(date -d "120 min ago" '+%Y%m%d%H%M%S') '{split($4,t,/[[ :\/]/); mthNr = sprintf("%02d",(index("JanFebMarAprMayJunJulAugSepOctNovDec",t[3])+2)/3); curTime = t[4] mthNr t[2] t[5] t[6] t[7]} curTime >= minTime ' | awk '{print $1}' | sort | uniq -c | sort -rh | tee /root/dtorma_tempfile102.txt | awk -F ' ' '{sum+=$1} END {print sum}' > /root/dtorma_tempfile103.txt 
		test_var=$(cat /root/dtorma_tempfile103.txt)
		for each in $(head /root/dtorma_tempfile102.txt | awk -F ' ' '{print $1}' )
		do bc <<<"scale=3 ; $each / $test_var"
		done | awk '{printf "%f\n", $0}' | tr -d '.' | sed -e "s/.\{3\}/&./g" -e '/^[0]/ s/0/ /' > /root/dtorma_tempfile104.txt
		if [ "$test_var" -gt "0" ] 2>/dev/null
			then
			if ! [ "$each" == "" ]
				then 
				printf "[Total number of requests]: $test_var\n"
			else
				printf "[Total number of ${ycl}$each${ncl} requests]: $test_var\n"
			fi
		else
			if ! [ "$each" == "" ]
				then 
				printf "[No ${ycl}$each${ncl} requests found]" 
			else
				printf "[No requests found]" 
			fi
		fi
		paste /root/dtorma_tempfile10{2,4}.txt | head | awk '{printf "%7s [%5.1f%%] %s\n", $1, $3, $2}';
        echo
done
exit 1
fi

				# This part checks the size of the head it will print out
if ( [ "$va0" -eq "2" ] || [ "$va0" -eq "3" ] )
then printf "[${ycl}Block Size${ncl}]: "
read va1
if [ -z "$va1" ]
then va1=10
elif ! ( [ "$va1" -gt "0" ] && [ "$va1" -lt "50" ] ) 2>/dev/null
then va1=10
printf "Invalid value, reverting to default value of 10\n"
fi
fi


				# This part checks for the timeframe in regards to how back it will search for - in case they choose the extended version, they are able to specify with hour precision
if [ "$va0" -eq "2" ]
then printf "[${ycl}Timeframe${ncl}](In hours): "
read va4
if [ -z "$va4" ]
then va2=1440
elif ! ( [ "$va4" -gt "0" ] && [ "$va4" -lt "17520" ] ) 2>/dev/null
then va2=1440
printf "Invalid value, reverting to default value of 24 hours\n"
else
va2=$(($va4*60))
fi
fi

				# This part checks for the timeframe in regards to how back it will search for - in case they choose the extended version, they are able to specify with minutes precision
if [ "$va0" -eq "3" ]
then printf "[${ycl}Timeframe${ncl}](In minutes): "
read va2
if [ -z "$va2" ]
then va2=1440
elif ! ( [ "$va2" -gt "0" ] && [ "$va2" -lt "1051897" ] ) 2>/dev/null
then va2=1440
printf "Invalid value, reverting to default value of 1440 minutes (24 hours)\n"
fi
fi

                # These 2 variables are days in int and in float format, to show how many days back and 
va2day=$(($va2/1440))
va2dayd=$(bc <<< "scale=3 ; $va2 / 1440")

                # This part checks for whether this search is for a single or all domains
if ( [ "$va0" -eq "2" ] || [ "$va0" -eq "3" ] )
then printf "[${ycl}Domain${ncl}]: "
read va3
if [ -z "$va3" ]
then va3="null"
fi
fi
                # Shows the grep time frame
# printf "\n[${ycl}Time Frame${ncl}][${ycl}%7.2f${ncl} Days]: $(date -d "$va2 min ago" "+%e-%b-%Y %T") \n\t\t\t    $(date "+%e-%b-%Y %T")\n\n" $va2dayd
printf "\n[${ycl}Time Frame${ncl}][${ycl}%7.2f${ncl} Days]: \n $(date -d "$va2 min ago" "+%e-%b-%Y %T") \n $(date "+%e-%b-%Y %T")\n\n" $va2dayd

                # This finds all the searched for logs and pastes the paths to the /root/dtorma_tempfile101.txt file
if [ "$va3" == "null" ]
then find /usr/local/apache/domlogs/*/ /home/*/logs/ -maxdepth 1 -type f -not -name "*php.error.log" -mtime -$((va2day+1)) -exec echo {} >> /root/dtorma_tempfile101.txt \;

                # This finds all the searched logs for a single domain (only the domain specified, no subdomains indluded)
else find /usr/local/apache/domlogs/*/ /home/*/logs/ -maxdepth 1 -type f -not -name "*php.error.log" -mtime -$((va2day+1)) | grep "/$va3" >> /root/dtorma_tempfile101.txt
printf "[Statistics for domain]: ${ycl}$va3${ncl}\n"
fi

                # These two lines simply paste all the contents from the wanted logs into a single file for easier greping and to avoid using find over and over again
zcat $(grep .gz /root/dtorma_tempfile101.txt) >> /root/dtorma_tempfile100.txt
cat $(cat /root/dtorma_tempfile101.txt) >> /root/dtorma_tempfile100.txt

				# This for loop greps different patterns
if [ "$va0" == "2" ]
then sarray=( wp-login.php xmlrpc.php POST )
elif [ "$va0" == "3" ]
then sarray=( wp-login.php xmlrpc.php POST "" )
fi

for each in "${sarray[@]}"
do
        grep "${each}" /root/dtorma_tempfile100.txt | awk -v minTime=$(date -d "$va2 min ago" '+%Y%m%d%H%M%S') '{split($4,t,/[[ :\/]/); mthNr = sprintf("%02d",(index("JanFebMarAprMayJunJulAugSepOctNovDec",t[3])+2)/3); curTime = t[4] mthNr t[2] t[5] t[6] t[7]} curTime >= minTime ' | grep -v "127.0.0.1" | awk '{print $1}' | sort | uniq -c | sort -rh | tee /root/dtorma_tempfile102.txt | awk -F ' ' '{sum+=$1} END {print sum}' > /root/dtorma_tempfile103.txt 
		test_var=$(cat /root/dtorma_tempfile103.txt)
		for each in $(head -$va1 /root/dtorma_tempfile102.txt | awk -F ' ' '{print $1}' )
		do bc <<<"scale=3 ; $each / $test_var"
		done | awk '{printf "%f\n", $0}' | tr -d '.' | sed -e "s/.\{3\}/&./g" -e '/^[0]/ s/0/ /' > /root/dtorma_tempfile104.txt
		if [ "$test_var" -gt "0" ] 2>/dev/null
			then
			if ! [ "$each" == "" ]
				then 
				printf "[Total number of ${ycl}$each${ncl} requests]: $test_var\n"
			else
				printf "[Total number of requests]: $test_var\n"
			fi
		else
			if ! [ "$each" == "" ]
				then 
				printf "[No ${ycl}$each${ncl} requests found]" 
			else
				printf "[No requests found]" 
			fi
		fi
		paste /root/dtorma_tempfile10{2,4}.txt | head -$va1 | awk '{printf "%7s [%5.1f%%] %s\n", $1, $3, $2}';
        echo
done

if [ "$va3" == "null" ]
		then
		find $(cat /root/dtorma_tempfile101.txt) -type f | xargs zgrep -a "" | awk -v minTime=$(date -d "$va2 min ago" '+%Y%m%d%H%M%S') '{split($4,t,/[[ :\/]/); mthNr = sprintf("%02d",(index("JanFebMarAprMayJunJulAugSepOctNovDec",t[3])+2)/3); curTime = t[4] mthNr t[2] t[5] t[6] t[7]} curTime >= minTime ' | grep -v "127.0.0.1" | awk '{print $1}' | cut -d':' -f1 | cut -d'/' -f1,5- | sed -e 's/\/domlogs\/.*\//\//g' -e 's/.gz//g' -e 's/\///g' -e 's/-ssl_log/_SSL /g' -e 's/-.*-.*//g'  | sort | uniq -c | sort -rh | tee /root/dtorma_tempfile102.txt | awk -F ' ' '{sum+=$1} END {print sum}' > /root/dtorma_tempfile103.txt 
		test_var=$(cat /root/dtorma_tempfile103.txt)
		for each in $(head -$va1 /root/dtorma_tempfile102.txt | awk -F ' ' '{print $1}' )
		do bc <<<"scale=3 ; $each / $test_var"
		done | awk '{printf "%f\n", $0}' | tr -d '.' | sed -e "s/.\{3\}/&./g" -e '/^[0]/ s/0/ /' > /root/dtorma_tempfile104.txt
		if [ "$test_var" -gt "0" ] 2>/dev/null
			then
			printf "[Total number of requests ${ycl}per domain${ncl}]: $test_var\n"
		else
			printf "[No requests ${ycl}per domain${ncl} found]"  
		fi
		paste /root/dtorma_tempfile10{2,4}.txt | head -$va1 | awk '{printf "%7s [%5.1f%%] %s\n", $1, $3, $2}';
fi

				# Removes the temporary files that are created as a buffer
\rm /root/dtorma_tempfile10{0..4}.txt

				# This was implemented for testing purposes
# du -h /root/dtorma_tempfile10{0..4}.txt